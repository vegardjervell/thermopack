name: unittests

on: [push, pull_request]

jobs:
  run-tests:
    name: Test on ${{ matrix.os }} with ${{ matrix.toolchain.compiler }} ${{ matrix.toolchain.version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-2022, macos-12]
        toolchain:
          - {compiler: gcc, version: 13}
        include:
          # - os: ubuntu-latest
          #   toolchain: {nvidia-hpc, version: '23.11'}
          - os: windows-2022
            toolchain: {compiler: intel, version: '2024.1'}
          - os: windows-2022
            toolchain: {compiler: intel-classic, version: '2021.12'}
        # exclude:
        #   - os: windows-latest
        #     toolchain: {compiler: gcc, version: 13}

    steps:
      - uses: actions/checkout@v4
      - name: checkout submodules
        run: git submodule update --init --recursive

      - name: Setup Visual Studio 2022
        if: matrix.os == 'windows-2022'
        uses: microsoft/setup-msbuild@v1.0.2

      # - name: Install ninja-build tool
      #   if: matrix.os == 'windows-2022'
      #   uses: seanmiddleditch/gha-setup-ninja@16b940825621068d98711680b6c3ff92201f8fc0

      - uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        if: matrix.os != 'macos-12'
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          version: ${{ matrix.toolchain.version }}
      
      - name: Setup gfortran macos-12
        if: matrix.os == 'macos-12'
        run: |
          export FC=$(which gfortran-13)
          echo FC=$FC >> $GITHUB_ENV

      - name: Build ThermoPack
        if: matrix.os != 'windows-2022'
        run: |
          mkdir build
          cd build
          cmake -Dtest=ON -DCMAKE_BUILD_TYPE=Debug ..
          make -j4 install
      
      # - name: Build LAPACK Windows
      #   if: matrix.os == 'windows-2022'
      #   run: |
      #     cd external
      #     cd lapack
      #     cmake -B build -G Ninja -DCMAKE_Fortran_COMPILER=${{ env.FC }} -DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icx
      #     cmake --build build --target install

      - name: Build ThermoPack Windows
        if: matrix.os == 'windows-2022'
        run: |
          echo "Building on ${{ matrix.os }}"
          $FC = ${{ env.FC }}
          $FC_PATH = $((Get-Command ${{ env.FC }} | Select-Object -ExpandProperty Path) -replace '\\', '/')
          echo "Using compiler $env:FC / ${{ env.FC }}"
          echo "Fortran compiler at: $(Get-Command ${{ env.FC }} | Select-Object -ExpandProperty Path) / $FC_PATH"
          cmake -B build -G "Visual Studio 17 2022" -DCMAKE_Fortran_COMPILER=${{ env.FC }}
          cmake --build build --target install --verbose
    # -DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icx
      
      - name: Inspect thermopack
        if: matrix.os == 'ubuntu'
        run: | 
          echo "--- Inspecting libthermopack ---"
          ldd installed/libthermopack.so
          echo "--- Inspecting run_unittests ---"
          ldd installed/unittests

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
            name: binary-${{ matrix.os }}-${{ matrix.toolchain.compiler }}
            path: ./installed/*
    
      - id: fortran_test
        name: Run unittests
        if: matrix.os != 'windows-2022'
        continue-on-error: true
        run: |
            result=$(./installed/unittests)
            if echo "$result" | grep -q "OK"; then
            statuscode=0
            else
            statuscode=1
            fi
            echo "$result"
            echo "statuscode=$statuscode" >> $GITHUB_OUTPUT
            exit $statuscode
            
      - uses: actions/setup-python@v5
      - id: python_test 
        name: Run python tests for Linux/MacOS
        if: matrix.os != 'windows-2022'
        continue-on-error: true
        run: |
            python addon/pycThermopack/map_platform_specifics.py
            pip install addon/pycThermopack/[test]
            pytest addon/pyTests
            result=$(pytest addon/pyTests)
            if echo "$result" | grep -q "FAILED"; then
            statuscode=1
            else
            statuscode=0
            fi
            echo "$result"
            echo "statuscode=$statuscode" >> $GITHUB_OUTPUT
            exit $statuscode
    
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - id: python_test_windows
        name: Run python tests for Windows
        if: matrix.os == 'windows-2022'
        continue-on-error: true
        run: |
            python -m pip install --upgrade pip
            pip install pytest numpy
            python -c "import sys; sys.path.insert(0, './addon/pycThermopack'); import makescript; makescript.windows_make('v3')"
            dumpbin /EXPORTS ./addon/pycThermopack/thermopack/thermopack.dll
            pip install ./addon/pycThermopack/[test]
            $result = python -m pytest ./addon/pyTests
            if ($result -match "FAILED") {
              $statuscode = 1
            } else {
              $statuscode = 0
            }
            Write-Output $result
            Add-Content -Path $env:GITHUB_OUTPUT -Value "statuscode=$statuscode"
            exit $statuscode

      - name: Check success
        if: matrix.os != 'windows-2022'
        run: |
            echo "Fortran test result : ${{ steps.fortran_test.outputs.statuscode }}"
            echo "Python test result : ${{ steps.python_test.outputs.statuscode }}"
            if [[ ${{ steps.fortran_test.outputs.statuscode }} -eq 0 ]] && [[ ${{ steps.python_test.outputs.statuscode }} -eq 0 ]]; then
            exit 0
            else
            exit 1
            fi

      - name: Check success Windows
        if: matrix.os == 'windows-2022'
        run: |
            $statusCode = ${{ steps.python_test_windows.outputs.statuscode }}
            Write-Host "Python test result: $statusCode"
            if ($statusCode -eq 0) {
              exit 0
            } else {
              exit 1
            }